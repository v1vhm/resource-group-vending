# yamllint disable rule:line-length rule:truthy
---
name: Associate Service

on:
  workflow_dispatch:
    inputs:
      environment_identifier:
        description: 'Environment identifier (<product_identifier>_<environment>_<location> in lower case)'
        required: true
      service_identifier:
        description: 'Service identifier'
        required: true
      github_repo:
        description: 'GitHub repository (org/repo)'
        required: true
      port_run_id:
        description: 'Port action run id'
        required: true
      request_identifier:
        description: 'Request identifier that triggered this workflow'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: write
    env:
      PORT_RUN_ID: ${{ inputs.port_run_id }}
    outputs:
      product_identifier: ${{ steps.env.outputs.product_identifier }}
      environment: ${{ steps.env.outputs.environment }}
      location: ${{ steps.env.outputs.location }}
      env_short_name: ${{ steps.env.outputs.env_short_name }}
      container_name: ${{ steps.container.outputs.container_name }}
      environment_file: ${{ steps.env.outputs.environment_file }}
    steps:
      - name: Log start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting prepare for service ${{ inputs.service_identifier }} in ${{ inputs.environment_identifier }} via repo ${{ inputs.github_repo }}'

      - uses: actions/checkout@v5

      - name: Load environment context
        id: env
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          ENV_FILE="${{ github.workspace }}/environments/${{ inputs.environment_identifier }}.yaml"
          if [ ! -f "$ENV_FILE" ]; then
            echo "Environment file not found" >&2
            exit 1
          fi
          PRODUCT_IDENTIFIER=$(grep '^product_identifier:' "$ENV_FILE" | awk '{print $2}')
          ENVIRONMENT=$(grep '^environment:' "$ENV_FILE" | awk '{print $2}')
          LOCATION=$(grep '^location:' "$ENV_FILE" | awk '{print $2}')
          ENV_SHORT_NAME=$(echo "$PRODUCT_IDENTIFIER" | tr '[:upper:]' '[:lower:]')
          {
            echo "product_identifier=$PRODUCT_IDENTIFIER"
            echo "environment=$ENVIRONMENT"
            echo "location=$LOCATION"
            echo "env_short_name=$ENV_SHORT_NAME"
            echo "environment_file=$ENV_FILE"
          } >> "$GITHUB_OUTPUT"

      - name: Set storage container name
        id: container
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          CONTAINER_NAME=$(echo "${{ steps.env.outputs.env_short_name }}${{ steps.env.outputs.environment }}${{ steps.env.outputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' _' '-')
          echo "container_name=$CONTAINER_NAME" >> "$GITHUB_OUTPUT"

      - name: Update services list
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          pip install pyyaml
          cat <<'PY' > update_service.py
          import yaml, os
          env_file = os.environ['ENV_FILE']
          service_id = os.environ['SERVICE_ID']
          github_repo = os.environ['GITHUB_REPO']
          port_run_id = os.environ['PORT_RUN_ID']
          with open(env_file) as f:
              data = yaml.safe_load(f) or {}
          services = data.get('services', [])
          for svc in services:
              if svc.get('service_identifier') == service_id:
                  svc['github'] = {'repository': github_repo}
                  break
          else:
              services.append({'service_identifier': service_id, 'github': {'repository': github_repo}})
          data['services'] = services
          data['port_run_id'] = port_run_id
          with open(env_file, 'w') as f:
              yaml.dump(data, f, sort_keys=False)
          PY
          sed -i 's/^          //' update_service.py
          python update_service.py
        env:
          ENV_FILE: ${{ steps.env.outputs.environment_file }}
          SERVICE_ID: ${{ inputs.service_identifier }}
          GITHUB_REPO: ${{ inputs.github_repo }}

      - name: Commit updated environment file
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add "${{ steps.env.outputs.environment_file }}"
          git commit -m "Associate service ${{ inputs.service_identifier }} with ${{ inputs.environment_identifier }}"
          git push origin HEAD:main

      - name: Log summary
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Environment file updated for ${{ inputs.environment_identifier }} with service ${{ inputs.service_identifier }}'

      - name: Log failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: 'Prepare job failed for service ${{ inputs.service_identifier }} in ${{ inputs.environment_identifier }}'

  terraform:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: write
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      TF_VAR_environment_file: ${{ needs.prepare.outputs.environment_file }}
      PORT_RUN_ID: ${{ inputs.port_run_id }}
      TF_VAR_port_run_id: ${{ inputs.port_run_id }}
    outputs:
      plan_log: ${{ steps.plan.outputs.log }}
      apply_log: ${{ steps.apply.outputs.log }}
    steps:
      - name: Log start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting terraform for service ${{ inputs.service_identifier }} in ${{ inputs.environment_identifier }}'

      - uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Terraform Init
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=v1vhm-rg-vending-prod-uks-001" \
            -backend-config="storage_account_name=vendingtfstate" \
            -backend-config="container_name=${{ needs.prepare.outputs.container_name }}" \
            -backend-config="key=${{ needs.prepare.outputs.product_identifier }}_${{ needs.prepare.outputs.environment }}_${{ needs.prepare.outputs.location }}.tfstate" \
            -reconfigure

      - name: Terraform Plan
        id: plan
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          set +e
          terraform -chdir=terraform plan -no-color 2>&1 | tee plan.log
          status=$?
          echo "log<<EOF" >> $GITHUB_OUTPUT
          cat plan.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit $status

      - name: Terraform Apply (update Port relations)
        id: apply
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          set +e
          terraform -chdir=terraform apply -auto-approve -no-color 2>&1 | tee apply.log
          status=$?
          echo "log<<EOF" >> $GITHUB_OUTPUT
          cat apply.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          exit $status

      - name: Upload Terraform logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: |
            plan.log
            apply.log
          if-no-files-found: ignore

      - name: Log summary
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Terraform plan and apply succeeded for ${{ inputs.service_identifier }} in ${{ inputs.environment_identifier }}'

      - name: Log failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: "Terraform failed for ${{ inputs.service_identifier }} in ${{ inputs.environment_identifier }}: plan=${{ steps.plan.outputs.log }} apply=${{ steps.apply.outputs.log }}"

  finalize:
    needs:
      - prepare
      - terraform
    if: ${{ always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PORT_RUN_ID: ${{ inputs.port_run_id }}
      PRODUCT_IDENTIFIER: ${{ needs.prepare.outputs.product_identifier }}
      ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
      LOCATION: ${{ needs.prepare.outputs.location }}
      ENV_SHORT_NAME: ${{ needs.prepare.outputs.env_short_name }}
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
      ENV_FILE: ${{ needs.prepare.outputs.environment_file }}
    steps:
      - name: Log start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting finalize for service ${{ inputs.service_identifier }} in ${{ env.PRODUCT_IDENTIFIER }}_${{ env.ENVIRONMENT }}_${{ env.LOCATION }}'

      - name: Update request status
        if: ${{ needs.terraform.result == 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          blueprint: link_environment_request
          identifier: ${{ inputs.request_identifier }}
          properties: >-
            {"status": "Configuring Service"}

      - name: Update request failure status
        if: ${{ needs.terraform.result != 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          blueprint: link_environment_request
          identifier: ${{ inputs.request_identifier }}
          properties: >-
            {"status": "Failed"}

      - name: Log summary
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Service association complete for ${{ inputs.service_identifier }} in ${{ env.PRODUCT_IDENTIFIER }}_${{ env.ENVIRONMENT }}_${{ env.LOCATION }}'

      - name: Log failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: "Finalize stage failed for ${{ env.PRODUCT_IDENTIFIER }}_${{ env.ENVIRONMENT }}_${{ env.LOCATION }}: plan=${{ needs.terraform.outputs.plan_log }} apply=${{ needs.terraform.outputs.apply_log }}"

      - name: Upload environment file
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: environment-file
          path: ${{ env.ENV_FILE }}
          if-no-files-found: ignore
