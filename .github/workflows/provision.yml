name: Provision Environment

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: 'Product name'
        required: true
      product_short_name:
        description: 'Short name used for the file name'
        required: true
      location:
        description: 'Azure region'
        required: true
        default: 'eastus'
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
      product_identifier:
        description: 'Product identifier'
        required: true
      port_context:
        required: true
        description: Includes the action's run id
        type: string

jobs:
  provision:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      TF_VAR_environment_file: ${{ github.workspace }}/environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml
    steps:
      - name: Start run
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Product provisioning started'

      - uses: actions/checkout@v4

      - name: Check for existing environment file
        id: check_env
        run: |
          if [ -f environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Log existing environment file
        if: steps.check_env.outputs.exists == 'true'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: 'Product environment file already exists'

      - name: Stop if environment file exists
        if: steps.check_env.outputs.exists == 'true'
        run: exit 1


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Log start environment file creation
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting product environment file creation'

      - name: Derive environment identifiers
        run: |
          ENVIRONMENT_IDENTIFIER=$(echo "${{ inputs.product_name }}_${{ inputs.environment }}_${{ inputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
          ENVIRONMENT_TITLE="${{ inputs.product_name }} ${{ inputs.environment }}"
          echo "ENVIRONMENT_IDENTIFIER=$ENVIRONMENT_IDENTIFIER" >> $GITHUB_ENV
          echo "ENVIRONMENT_TITLE=$ENVIRONMENT_TITLE" >> $GITHUB_ENV

      - name: Create environment file
        id: create_env_file
        run: |
          mkdir -p environments
          cat <<EOF > environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml
          environment_identifier: $ENVIRONMENT_IDENTIFIER
          environment_title: $ENVIRONMENT_TITLE
          location: ${{ inputs.location }}
          environment: ${{ inputs.environment }}
          port_run_id: $PORT_RUN_ID
          product_name: ${{ inputs.product_name }}
          product_identifier: ${{ inputs.product_identifier }}
          services: []
          EOF
          echo "file_content<<EOF" >> $GITHUB_OUTPUT
          cat environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Log environment file content
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.create_env_file.outputs.file_content }}

      - name: Set storage container name
        run: |
          CONTAINER_NAME=$(echo "${{ inputs.product_short_name }}${{ inputs.environment }}${{ inputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' _' '-')
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV

      - name: Create state container
        run: |
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name vendingtfstate \
            --resource-group v1vhm-rg-vending-prod-uks-001 \
            --auth-mode login

      - name: Capture state container id
        run: |
          STATE_FILE_CONTAINER=$(az storage container show \
            --name $CONTAINER_NAME \
            --account-name vendingtfstate \
            --resource-group v1vhm-rg-vending-prod-uks-001 \
            --auth-mode login \
            --query id -o tsv)
          echo "STATE_FILE_CONTAINER=$STATE_FILE_CONTAINER" >> $GITHUB_ENV

      - name: Log start terraform init
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Init'

      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=v1vhm-rg-vending-prod-uks-001" \
            -backend-config="storage_account_name=vendingtfstate" \
            -backend-config="container_name=${CONTAINER_NAME}" \
            -backend-config="key=${{ inputs.product_identifier }}_${{ inputs.environment }}_${{ inputs.location }}.tfstate" \
            -reconfigure

      - name: Log start terraform plan
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Plan'

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=terraform plan -no-color > plan.log
          echo "plan<<EOF" >> $GITHUB_OUTPUT
          cat plan.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Log plan output
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.plan.outputs.plan }}

      - name: Log start terraform apply
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Apply'

      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=terraform apply -auto-approve -no-color > apply.log
          echo "apply<<EOF" >> $GITHUB_OUTPUT
          cat apply.log >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Log apply output
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.apply.outputs.apply }}

      - name: Capture outputs
        run: terraform -chdir=terraform output -json > tfoutput.json

      - name: Log start append outputs
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Appending Terraform outputs to product environment file'

      - name: Append outputs to environment file
        run: |
          DEPLOYMENT_ENV=$(jq -r '.deployment_environment.value' tfoutput.json)
          DEPLOYMENT_IDENTITY=$(jq -r '.deployment_identity.value' tfoutput.json)
          AZURE_SUBSCRIPTION=$(jq -r '.azure_subscription.value' tfoutput.json)
          {
            echo "deployment_environment: $DEPLOYMENT_ENV"
            echo "deployment_identity: $DEPLOYMENT_IDENTITY"
            echo "azure_subscription: $AZURE_SUBSCRIPTION"
            echo "state_file_container: $STATE_FILE_CONTAINER"
          } >> environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml

      - name: Log start commit updated environment file
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Committing updated product environment file'

      - name: Commit updated environment file
        run: |
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml
          git commit -m "Update product environment ${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }} with outputs"
          git push origin HEAD:main

      - name: Mark run success
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Product provisioning complete'

      - name: Mark run failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: 'Product provisioning failed'
