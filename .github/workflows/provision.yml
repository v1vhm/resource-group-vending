# yamllint disable rule:line-length rule:truthy
---
name: Provision Environment

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: 'Product name'
        required: true
      product_short_name:
        description: 'Short name used for the file name'
        required: true
      location:
        description: 'Azure region'
        required: true
        default: 'eastus'
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
      product_identifier:
        description: 'Product identifier'
        required: true
      port_context:
        required: true
        description: Includes the action's run id
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: write
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    outputs:
      environment_file: ${{ steps.create_env_file.outputs.path }}
      env_state_container: ${{ steps.compute_env_state_container.outputs.name }}
      state_file_container_id: ${{ steps.compute_state_container_id.outputs.id }}
    steps:
      - name: Start run
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Preparing ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

      - uses: actions/checkout@v5

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Check for existing environment file
        id: check_env
        run: |
          FILE_NAME=$(echo "${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}" | tr '[:upper:]' '[:lower:]')
          if [ -f "environments/${FILE_NAME}.yaml" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Log existing environment file
        if: steps.check_env.outputs.exists == 'true'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Product environment file already exists'

      - name: Stop if environment file exists
        if: steps.check_env.outputs.exists == 'true'
        run: exit 1

      - name: Derive environment identifiers
        run: |
          ENVIRONMENT_IDENTIFIER=$(echo "${{ inputs.product_identifier }}_${{ inputs.environment }}_${{ inputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
          ENVIRONMENT_TITLE="${{ inputs.product_name }} ${{ inputs.environment }}"
          echo "ENVIRONMENT_IDENTIFIER=$ENVIRONMENT_IDENTIFIER" >> $GITHUB_ENV
          echo "ENVIRONMENT_TITLE=$ENVIRONMENT_TITLE" >> $GITHUB_ENV

      - name: Create environment file
        id: create_env_file
        run: |
          mkdir -p environments
          FILE_NAME=$(echo "${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}" | tr '[:upper:]' '[:lower:]')
          FILE_PATH="environments/${FILE_NAME}.yaml"
          cat <<EOF > $FILE_PATH
          environment_identifier: $ENVIRONMENT_IDENTIFIER
          environment_title: $ENVIRONMENT_TITLE
          location: ${{ inputs.location }}
          environment: ${{ inputs.environment }}
          product_name: ${{ inputs.product_name }}
          product_identifier: ${{ inputs.product_identifier }}
          port_run_id: $PORT_RUN_ID
          vending_state_container:
          EOF
          echo "path=$FILE_PATH" >> $GITHUB_OUTPUT

      - name: Mark environment in progress
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          echo "status: in_progress" >> "${{ steps.create_env_file.outputs.path }}"

      - name: Commit environment file
        run: |
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add ${{ steps.create_env_file.outputs.path }}
          FILE_BASENAME=$(basename "${{ steps.create_env_file.outputs.path }}" .yaml)
          git commit -m "Add environment $FILE_BASENAME"
          git push origin HEAD:main

      - name: Compute state container name
        id: compute_env_state_container
        run: |
          ENV_STATE_CONTAINER=$(echo "envstate-${{ inputs.product_short_name }}-${{ inputs.environment }}-${{ inputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' _' '-')
          echo "name=$ENV_STATE_CONTAINER" >> $GITHUB_OUTPUT
          echo "ENV_STATE_CONTAINER=$ENV_STATE_CONTAINER" >> $GITHUB_ENV

      - name: Create state container
        run: |
          az storage container create \
            --name $ENV_STATE_CONTAINER \
            --account-name vendingtfstate \
            --resource-group v1vhm-rg-vending-prod-uks-001 \
            --auth-mode login
      - name: Compute state container id
        id: compute_state_container_id
        run: |
          STATE_FILE_CONTAINER_ID=$(echo "vendingtfstate-${ENV_STATE_CONTAINER}" | tr '[:upper:]' '[:lower:]')
          echo "STATE_FILE_CONTAINER_ID=$STATE_FILE_CONTAINER_ID" >> $GITHUB_ENV
          echo "id=$STATE_FILE_CONTAINER_ID" >> $GITHUB_OUTPUT
      - name: Upsert state container
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          blueprint: azureStorageContainer
          identifier: ${{ env.STATE_FILE_CONTAINER_ID }}
          title: ${{ env.ENV_STATE_CONTAINER }}
          relations: >-
            {"storageAccount": "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourcegroups/v1vhm-rg-vending-prod-uks-001/providers/microsoft.storage/storageaccounts/vendingtfstate"}
          properties: '{}'
      - name: Log preparation complete
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Prepared ${{ steps.create_env_file.outputs.path }} and container ${{ steps.compute_env_state_container.outputs.name }}'

      - name: Log preparation failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Preparation stage failed for ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

  plan:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      id-token: write
      contents: write
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      TF_VAR_environment_file: ${{ github.workspace }}/${{ needs.prepare.outputs.environment_file }}
      ENV_STATE_CONTAINER: ${{ needs.prepare.outputs.env_state_container }}
    outputs:
      plan_path: ${{ steps.plan.outputs.path }}
      plan_summary: ${{ steps.summarize.outputs.summary }}
    steps:
      - name: Log start plan
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting plan stage for ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

      - uses: actions/checkout@v5
        with:
          ref: main

      - name: Verify environment file
        run: test -f "$TF_VAR_environment_file"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=v1vhm-rg-vending-prod-uks-001" \
            -backend-config="storage_account_name=vendingtfstate" \
            -backend-config="container_name=${ENV_STATE_CONTAINER}" \
            -backend-config="key=${{ inputs.product_identifier }}_${{ inputs.environment }}_${{ inputs.location }}.tfstate" \
            -reconfigure

      # Set TF_LOG_LEVEL (e.g., TRACE) to capture detailed Terraform logs
      - name: Terraform Plan
        id: plan
        run: ./scripts/terraform-run.sh plan tfplan plan.log

      - name: Summarize Plan
        if: success()
        id: summarize
        run: |
          terraform -chdir=terraform show -json tfplan | jq -r '.resource_changes[] | "- " + .address + ": " + (.change.actions|join(", "))' > plan_summary.txt
          cat plan_summary.txt
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat plan_summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload plan
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

      - name: Log plan completion
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.summarize.outputs.summary }}

      - name: Log plan failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "Plan stage failed: ${{ steps.plan.outputs.log }}"

  apply:
    needs: [prepare, plan]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      id-token: write
      contents: write
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      TF_VAR_environment_file: ${{ github.workspace }}/${{ needs.prepare.outputs.environment_file }}
      ENV_STATE_CONTAINER: ${{ needs.prepare.outputs.env_state_container }}
      STATE_FILE_CONTAINER_ID: ${{ needs.prepare.outputs.state_file_container_id }}
    outputs:
      commit_sha: ${{ steps.commit.outputs.sha }}
    steps:
      - name: Log start apply
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting apply stage for ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

      - uses: actions/checkout@v5
        with:
          ref: main

      - name: Verify environment file
        run: test -f "$TF_VAR_environment_file"

      - uses: actions/download-artifact@v5
        with:
          name: tfplan
          path: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Log start terraform init
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Init'

      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=v1vhm-rg-vending-prod-uks-001" \
            -backend-config="storage_account_name=vendingtfstate" \
            -backend-config="container_name=${ENV_STATE_CONTAINER}" \
            -backend-config="key=${{ inputs.product_identifier }}_${{ inputs.environment }}_${{ inputs.location }}.tfstate" \
            -reconfigure

      - name: Log start terraform apply
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Apply'

      # Set TF_LOG_LEVEL (e.g., TRACE) to capture detailed Terraform logs
      - name: Terraform Apply
        id: apply
        run: ./scripts/terraform-run.sh apply tfplan apply.log

      - name: Log apply output
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.apply.outputs.log }}

      - name: Capture outputs
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          terraform -chdir=terraform output -json > tfoutput.json
          for key in deployment_environment deployment_identity azure_subscription user_managed_identity_client_id; do
            value=$(jq -r ".${key}.value" tfoutput.json)
            varname=$(echo "$key" | tr '[:lower:]' '[:upper:]')
            echo "${varname}=$value" >> "$GITHUB_ENV"
          done
          SERVICE_CONTAINERS=$(jq -c '.service_containers.value' tfoutput.json)
          echo "SERVICE_CONTAINERS=$SERVICE_CONTAINERS" >> "$GITHUB_ENV"

      - uses: actions/upload-artifact@v4
        with:
          name: tfoutput
          path: tfoutput.json

      - name: Install yq
        run: sudo snap install yq --classic

      - name: Append outputs to environment file
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          {
            echo "deployment_environment: $DEPLOYMENT_ENVIRONMENT"
            echo "deployment_identity: $DEPLOYMENT_IDENTITY"
            echo "azure_subscription: $AZURE_SUBSCRIPTION"
          } >> "$TF_VAR_environment_file"
          yq e -i ".vending_state_container = \"$ENV_STATE_CONTAINER\"" "$TF_VAR_environment_file"
          echo "$SERVICE_CONTAINERS" | jq -r 'to_entries[] | "\(.key)=\(.value.id)"' | while IFS='=' read -r svc id; do
            yq e -i "(.services[] | select(.service_identifier == \"$svc\") | .deployment_state_container) = \"$id\"" "$TF_VAR_environment_file"
          done

      - name: Commit updated environment file
        id: commit
        run: |
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add $TF_VAR_environment_file
          FILE_BASENAME=$(basename "$TF_VAR_environment_file" .yaml)
          git commit -m "Update environment $FILE_BASENAME with outputs"
          git push origin HEAD:main
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Mark apply success
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: >-
            Terraform apply complete for env=${{ env.DEPLOYMENT_ENVIRONMENT }},
            identity=${{ env.DEPLOYMENT_IDENTITY }},
            subscription=${{ env.AZURE_SUBSCRIPTION }}

      - name: Mark apply failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "Apply stage failed: ${{ steps.apply.outputs.log }}"

  finalize:
    needs: [apply, prepare]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
    env:
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      ENV_FILE: ${{ needs.prepare.outputs.environment_file }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: main

      - name: Install yq
        run: sudo snap install yq --classic

      - name: Load deployment metadata
        shell: bash
        run: |
          set -euo pipefail
          IFS=$'\n\t'
          DEPLOYMENT_ENVIRONMENT=$(grep '^deployment_environment:' "$ENV_FILE" | awk '{print $2}')
          DEPLOYMENT_IDENTITY=$(grep '^deployment_identity:' "$ENV_FILE" | awk '{print $2}')
          AZURE_SUBSCRIPTION=$(grep '^azure_subscription:' "$ENV_FILE" | awk '{print $2}')
          VENDING_STATE_CONTAINER=$(grep '^vending_state_container:' "$ENV_FILE" | awk '{print $2}')
          if yq e '.services | length > 0' "$ENV_FILE" >/dev/null; then
            MISSING=$(yq e '.services[] | select(.deployment_state_container == null or .deployment_state_container == "") | length' "$ENV_FILE")
            if [ "$MISSING" != "0" ]; then
              echo "::error::missing deployment_state_container for service" >&2
              exit 1
            fi
          fi
          {
            echo "DEPLOYMENT_ENVIRONMENT=$DEPLOYMENT_ENVIRONMENT"
            echo "DEPLOYMENT_IDENTITY=$DEPLOYMENT_IDENTITY"
            echo "AZURE_SUBSCRIPTION=$AZURE_SUBSCRIPTION"
            echo "VENDING_STATE_CONTAINER=$VENDING_STATE_CONTAINER"
          } >> "$GITHUB_ENV"

      - name: Log start finalize
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: >-
            Finalizing ${{ env.ENV_FILE }} with env=${{ env.DEPLOYMENT_ENVIRONMENT }},
            identity=${{ env.DEPLOYMENT_IDENTITY }},
            subscription=${{ env.AZURE_SUBSCRIPTION }}

      - name: Verify environment file
        run: test -f "$ENV_FILE"

      - name: Mark environment as succeeded
        if: ${{ success() }}
        run: yq e -i '.status = "succeeded"' "$ENV_FILE"

      - name: Mark environment as failed
        if: ${{ failure() }}
        run: yq e -i '.status = "failed"' "$ENV_FILE"

      - name: Commit finalized environment file
        if: ${{ always() }}
        run: |
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add "$ENV_FILE"
          FILE_BASENAME=$(basename "$ENV_FILE" .yaml)
          git commit -m "Update environment $FILE_BASENAME status"
          git push origin HEAD:main

      - id: get_sha
        run: echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Log finalize completion
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: >-
            Finalized ${{ env.ENV_FILE }} with commit ${{ steps.get_sha.outputs.sha }} and ids env=${{ env.DEPLOYMENT_ENVIRONMENT }},
            identity=${{ env.DEPLOYMENT_IDENTITY }},
            subscription=${{ env.AZURE_SUBSCRIPTION }}

      - name: Log finalize failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "Finalize stage failed"
