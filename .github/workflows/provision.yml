name: Provision Environment

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: 'Product name'
        required: true
      product_short_name:
        description: 'Short name used for the file name'
        required: true
      location:
        description: 'Azure region'
        required: true
        default: 'eastus'
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
      product_identifier:
        description: 'Product identifier'
        required: true
      port_context:
        required: true
        description: Includes the action's run id
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    outputs:
      environment_file: ${{ steps.create_env_file.outputs.path }}
      container_name: ${{ steps.compute_container.outputs.name }}
    steps:
      - name: Start run
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Preparing ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Check for existing environment file
        id: check_env
        run: |
          if [ -f environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Log existing environment file
        if: steps.check_env.outputs.exists == 'true'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: 'Product environment file already exists'

      - name: Stop if environment file exists
        if: steps.check_env.outputs.exists == 'true'
        run: exit 1

      - name: Derive environment identifiers
        run: |
          ENVIRONMENT_IDENTIFIER=$(echo "${{ inputs.product_name }}_${{ inputs.environment }}_${{ inputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
          ENVIRONMENT_TITLE="${{ inputs.product_name }} ${{ inputs.environment }}"
          echo "ENVIRONMENT_IDENTIFIER=$ENVIRONMENT_IDENTIFIER" >> $GITHUB_ENV
          echo "ENVIRONMENT_TITLE=$ENVIRONMENT_TITLE" >> $GITHUB_ENV

      - name: Create environment file
        id: create_env_file
        run: |
          mkdir -p environments
          FILE_PATH=environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml
          cat <<EOF > $FILE_PATH
          environment_identifier: $ENVIRONMENT_IDENTIFIER
          environment_title: $ENVIRONMENT_TITLE
          location: ${{ inputs.location }}
          environment: ${{ inputs.environment }}
          product_name: ${{ inputs.product_name }}
          product_identifier: ${{ inputs.product_identifier }}
          port_run_id: $PORT_RUN_ID
          EOF
          echo "path=$FILE_PATH" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: environment-file
          path: ${{ steps.create_env_file.outputs.path }}

      - name: Compute container name
        id: compute_container
        run: |
          CONTAINER_NAME=$(echo "${{ inputs.product_short_name }}${{ inputs.environment }}${{ inputs.location }}" | tr '[:upper:]' '[:lower:]' | tr ' _' '-')
          echo "name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_ENV

      - name: Create state container
        run: |
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name vendingtfstate \
            --resource-group v1vhm-rg-vending-prod-uks-001 \
            --auth-mode login
      - name: Log preparation complete
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Prepared ${{ steps.create_env_file.outputs.path }} and container ${{ steps.compute_container.outputs.name }}'

      - name: Log preparation failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: 'Preparation stage failed for ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

  plan:
    needs: prepare
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      TF_VAR_environment_file: ${{ github.workspace }}/${{ needs.prepare.outputs.environment_file }}
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
    outputs:
      plan_path: ${{ steps.plan.outputs.path }}
      plan_summary: ${{ steps.summarize.outputs.summary }}
    steps:
      - name: Log start plan
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting plan stage for ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: environment-file

      - name: Move environment file
        run: mv $(basename ${{ needs.prepare.outputs.environment_file }}) ${{ needs.prepare.outputs.environment_file }}

      - name: Verify environment file
        run: test -f "$TF_VAR_environment_file"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=v1vhm-rg-vending-prod-uks-001" \
            -backend-config="storage_account_name=vendingtfstate" \
            -backend-config="container_name=${CONTAINER_NAME}" \
            -backend-config="key=${{ inputs.product_identifier }}_${{ inputs.environment }}_${{ inputs.location }}.tfstate" \
            -reconfigure

      - name: Terraform Plan
        id: plan
        run: ./scripts/terraform-run.sh plan tfplan plan.log

      - name: Summarize Plan
        if: success()
        id: summarize
        run: |
          terraform -chdir=terraform show -json tfplan | jq -r '.resource_changes[] | "- " + .address + ": " + (.change.actions|join(", "))' > plan_summary.txt
          cat plan_summary.txt
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat plan_summary.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload plan
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

      - name: Log plan completion
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.summarize.outputs.summary }}

      - name: Log plan failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: "Plan stage failed: ${{ steps.plan.outputs.log }}"

  apply:
    needs: [prepare, plan]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURECLIENTID }}
      ARM_TENANT_ID: ${{ secrets.AZURETENANTID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURESUBSCRIPTIONID }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      TF_VAR_port_run_id: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      TF_VAR_environment_file: ${{ github.workspace }}/${{ needs.prepare.outputs.environment_file }}
      CONTAINER_NAME: ${{ needs.prepare.outputs.container_name }}
    outputs:
      deployment_environment: ${{ steps.capture_outputs.outputs.deployment_environment }}
      deployment_identity: ${{ steps.capture_outputs.outputs.deployment_identity }}
      azure_subscription: ${{ steps.capture_outputs.outputs.azure_subscription }}
      state_file_container: ${{ steps.capture_outputs.outputs.state_file_container }}
    steps:
      - name: Log start apply
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting apply stage for ${{ inputs.product_name }} in ${{ inputs.location }} (${{ inputs.environment }})'

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: environment-file

      - name: Move environment file
        run: mv $(basename ${{ needs.prepare.outputs.environment_file }}) ${{ needs.prepare.outputs.environment_file }}

      - name: Verify environment file
        run: test -f "$TF_VAR_environment_file"

      - uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURECLIENTID }}
          tenant-id: ${{ secrets.AZURETENANTID }}
          subscription-id: ${{ secrets.AZURESUBSCRIPTIONID }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Capture state container id
        run: |
          STATE_FILE_CONTAINER=$(az storage container show \
            --name $CONTAINER_NAME \
            --account-name vendingtfstate \
            --resource-group v1vhm-rg-vending-prod-uks-001 \
            --auth-mode login \
            --query id -o tsv)
          echo "STATE_FILE_CONTAINER=$STATE_FILE_CONTAINER" >> $GITHUB_ENV

      - name: Log start terraform init
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Init'

      - name: Terraform Init
        run: |
          terraform -chdir=terraform init \
            -backend-config="resource_group_name=v1vhm-rg-vending-prod-uks-001" \
            -backend-config="storage_account_name=vendingtfstate" \
            -backend-config="container_name=${CONTAINER_NAME}" \
            -backend-config="key=${{ inputs.product_identifier }}_${{ inputs.environment }}_${{ inputs.location }}.tfstate" \
            -reconfigure

      - name: Log start terraform apply
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: 'Starting Terraform Apply'

      - name: Terraform Apply
        id: apply
        run: ./scripts/terraform-run.sh apply tfplan apply.log

      - name: Log apply output
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: ${{ steps.apply.outputs.log }}

      - name: Capture outputs
        id: capture_outputs
        run: |
          terraform -chdir=terraform output -json > tfoutput.json
          echo "deployment_environment=$(jq -r '.deployment_environment.value' tfoutput.json)" >> $GITHUB_OUTPUT
          echo "deployment_identity=$(jq -r '.deployment_identity.value' tfoutput.json)" >> $GITHUB_OUTPUT
          echo "azure_subscription=$(jq -r '.azure_subscription.value' tfoutput.json)" >> $GITHUB_OUTPUT
          echo "state_file_container=$STATE_FILE_CONTAINER" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: tfoutput
          path: tfoutput.json

      - name: Mark apply success
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: >-
            Terraform apply complete for env=${{ steps.capture_outputs.outputs.deployment_environment }},
            identity=${{ steps.capture_outputs.outputs.deployment_identity }},
            subscription=${{ steps.capture_outputs.outputs.azure_subscription }}

      - name: Mark apply failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: "Apply stage failed: ${{ steps.apply.outputs.log }}"

  finalize:
    needs: apply
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      ENV_FILE: environments/${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }}.yaml
    steps:
      - name: Log start finalize
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: >-
            Finalizing ${{ env.ENV_FILE }} with env=${{ needs.apply.outputs.deployment_environment }},
            identity=${{ needs.apply.outputs.deployment_identity }},
            subscription=${{ needs.apply.outputs.azure_subscription }}

      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: environment-file

      - name: Move environment file
        run: mv $(basename "$ENV_FILE") "$ENV_FILE"

      - name: Verify environment file
        run: test -f "$ENV_FILE"

      - name: Append outputs to environment file
        run: |
          {
            echo "deployment_environment: ${{ needs.apply.outputs.deployment_environment }}"
            echo "deployment_identity: ${{ needs.apply.outputs.deployment_identity }}"
            echo "azure_subscription: ${{ needs.apply.outputs.azure_subscription }}"
            echo "state_file_container: ${{ needs.apply.outputs.state_file_container }}"
          } >> $ENV_FILE

      - name: Commit updated environment file
        id: commit
        run: |
          set -euo pipefail
          finish() {
            status=$?
            echo "log<<EOF" >> "$GITHUB_OUTPUT"
            cat commit.log >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
            exit $status
          }
          trap finish ERR
          exec > >(tee commit.log) 2>&1
          git config user.email "75343302+getport-io[bot]@users.noreply.github.com"
          git config user.name "getport-io[bot]"
          git add $ENV_FILE
          git commit -m "Update product environment ${{ inputs.product_short_name }}_${{ inputs.environment }}_${{ inputs.location }} with outputs"
          git push origin HEAD:main
          echo "sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          trap - ERR
          finish

      - name: Log finalize completion
        if: success()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: >-
            Finalized ${{ env.ENV_FILE }} with commit ${{ steps.commit.outputs.sha }} and ids env=${{ needs.apply.outputs.deployment_environment }},
            identity=${{ needs.apply.outputs.deployment_identity }},
            subscription=${{ needs.apply.outputs.azure_subscription }}

      - name: Log finalize failure
        if: failure()
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: FAILURE
          logMessage: "Finalize stage failed: ${{ steps.commit.outputs.log }}"
